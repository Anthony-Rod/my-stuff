import cv2
import numpy as np
from PIL import Image
import PIL
from flask import Flask
# Read image
try:
       cap = cv2.VideoCapture("copy_18ED873F-FD08-4B34-91FF-5486E6562142.MP4")
except Exception:
       print("video could not be found")
left_lane_lines = []
right_lane_lines = []


class LineLane:
    def __init__(self, image):
        height, width = image.shape[:2]
        self.test = frame[:int(height*0.62), :]
        self.output = self.test.copy()
        self.height1, self.width1 = self.test.shape[:2]

    def image_process(self):

        mask = np.zeros_like(self.test)
        triangle = np.array([[(self.width1*0.08, self.height1*0.96), (self.width1*0.5, self.height1*0.5), (self.width1*0.92, self.height1*0.96)]], dtype=np.int32)
        triangle = triangle.reshape((-1, 1, 2))
        cv2.fillPoly(mask, [triangle], (255, 255, 255))
        cv2.polylines = (self.output, [triangle], True, (255, 0, 0), 3)
        masked_image = cv2.bitwise_and(self.test, mask)


        hsv_image = cv2.cvtColor(masked_image, cv2.COLOR_BGR2HSV)
        lower_silver = np.array([0, 0, 0], dtype = np.uint8)
        upper_silver = np.array([160, 40, 190], dtype = np.uint8)
        thresh = cv2.inRange(hsv_image, lower_silver, upper_silver)
        gaussian = cv2.blur(thresh, (7, 7))
        edges = cv2.Canny(gaussian, 40, 60)
        
        return edges
        
    def line_calc(self,canny):
            lines = cv2.HoughLinesP(
                        canny,
                        2, 
                        np.pi/180,
                        threshold=50, 
                        minLineLength=120, 
                        maxLineGap=40 
                        )
            #cv2.polylines(output, vertices, True, (0, 0, 255), 3)
            
            if lines is not None:
                for points in lines:
                    x1, y1, x2, y2 = points[0]

                    slope = (y2 - y1) / (x2 - x1) if x2 != x1 else 0


                    if slope > 4*self.height1/5/(self.width1):  

                        right_lane_lines.append([(x1, y1), (x2, y2)])

                    elif slope < 4*self.height1/5/self.width1*-1:

                        left_lane_lines.append([(x1, y1), (x2, y2)])

        
    def line_and_center(self):
            if len(left_lane_lines) > 0 and len(right_lane_lines) > 0:

                
                #left lanes
                leftx=np.array([])
                lefty=np.array([])
                #right lanes
                rightx=np.array([])
                righty=np.array([])
                for n in left_lane_lines:

                    leftx = np.append(leftx, n[0][0])
                    lefty = np.append(lefty, n[0][1])
                    leftx = np.append(leftx, n[1][0])
                    lefty = np.append(lefty, n[1][1])
                for n in right_lane_lines:
                    rightx = np.append(rightx, n[0][0])
                    righty = np.append(righty, n[0][1])
                    rightx = np.append(rightx, n[1][0])
                    righty = np.append(righty, n[1][1])

                    
                
                leftLine = np.polyfit(leftx, lefty, 1)
                rightLine = np.polyfit(rightx, righty, 1)

                #formula = y=mx+b | m =_Line[0] b =_Line[1]
                intersectL_bottom = (int(min(leftx)), int(max(lefty)))
                intersectR_bottom = (int(max(rightx)), int(max(righty)))
                intersectL_top = (int(max(leftx)), int(min(lefty)))
                intersectR_top = (int(min(rightx)), int(min(lefty)))
                cv2.line(self.output, intersectL_bottom, intersectL_top, (255, 0, 0), 3)
                cv2.line(self.output, intersectR_bottom, intersectR_top, (255, 0, 0), 3)
                
                center_top = (int((max(leftx) + min(rightx))/2), int((min(righty)+min(lefty))/2))
                center_bottom = (int((min(leftx)+max(rightx))/2), int((max(lefty)+max(righty))/2))
                cv2.line(self.output, center_bottom, center_top, (0, 255, 0), 4)



    def show_output(self, im):
        output_pil = Image.fromarray(self.output)
        Image.Image.paste(output_pil, resized_image)
        output = np.array(output_pil)
        cv2.imshow('Detected Lines and Centerline', output)



arrow = Image.open("109618.png")
arrow = arrow.rotate(270, PIL.Image.NEAREST, expand=1)
new_size = (130, 50)  # Example size
resized_image = arrow.resize(new_size)

try:
    cap = cv2.VideoCapture("copy_18ED873F-FD08-4B34-91FF-5486E6562142.MP4")
except Exception:
    print("video could not be found")
while cap.isOpened:
            
    ret, frame = cap.read()
    if not ret:
            print("failed to capture frame")
            break
    out = LineLane(frame)
    empty = out.image_process() 
    out.line_calc(empty)   
    out.line_and_center()
    out.show_output(resized_image)


    if cv2.waitKey(1) & 0xFF == ord('q'):
        cap.release()
        cv2.destroyAllWindows()


